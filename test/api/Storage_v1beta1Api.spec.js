/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KubernetesJsClient);
  }
}(this, function(expect, KubernetesJsClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KubernetesJsClient.Storage_v1beta1Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Storage_v1beta1Api', function() {
    describe('createCSIDriver', function() {
      it('should call createCSIDriver successfully', function(done) {
        //uncomment below and update the code to test createCSIDriver
        //instance.createCSIDriver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCSINode', function() {
      it('should call createCSINode successfully', function(done) {
        //uncomment below and update the code to test createCSINode
        //instance.createCSINode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStorageClass', function() {
      it('should call createStorageClass successfully', function(done) {
        //uncomment below and update the code to test createStorageClass
        //instance.createStorageClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVolumeAttachment', function() {
      it('should call createVolumeAttachment successfully', function(done) {
        //uncomment below and update the code to test createVolumeAttachment
        //instance.createVolumeAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCSIDriver', function() {
      it('should call deleteCSIDriver successfully', function(done) {
        //uncomment below and update the code to test deleteCSIDriver
        //instance.deleteCSIDriver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCSINode', function() {
      it('should call deleteCSINode successfully', function(done) {
        //uncomment below and update the code to test deleteCSINode
        //instance.deleteCSINode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionCSIDriver', function() {
      it('should call deleteCollectionCSIDriver successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionCSIDriver
        //instance.deleteCollectionCSIDriver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionCSINode', function() {
      it('should call deleteCollectionCSINode successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionCSINode
        //instance.deleteCollectionCSINode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionStorageClass', function() {
      it('should call deleteCollectionStorageClass successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionStorageClass
        //instance.deleteCollectionStorageClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionVolumeAttachment', function() {
      it('should call deleteCollectionVolumeAttachment successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionVolumeAttachment
        //instance.deleteCollectionVolumeAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStorageClass', function() {
      it('should call deleteStorageClass successfully', function(done) {
        //uncomment below and update the code to test deleteStorageClass
        //instance.deleteStorageClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVolumeAttachment', function() {
      it('should call deleteVolumeAttachment successfully', function(done) {
        //uncomment below and update the code to test deleteVolumeAttachment
        //instance.deleteVolumeAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAPIResources', function() {
      it('should call getAPIResources successfully', function(done) {
        //uncomment below and update the code to test getAPIResources
        //instance.getAPIResources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCSIDriver', function() {
      it('should call listCSIDriver successfully', function(done) {
        //uncomment below and update the code to test listCSIDriver
        //instance.listCSIDriver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCSINode', function() {
      it('should call listCSINode successfully', function(done) {
        //uncomment below and update the code to test listCSINode
        //instance.listCSINode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listStorageClass', function() {
      it('should call listStorageClass successfully', function(done) {
        //uncomment below and update the code to test listStorageClass
        //instance.listStorageClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVolumeAttachment', function() {
      it('should call listVolumeAttachment successfully', function(done) {
        //uncomment below and update the code to test listVolumeAttachment
        //instance.listVolumeAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCSIDriver', function() {
      it('should call patchCSIDriver successfully', function(done) {
        //uncomment below and update the code to test patchCSIDriver
        //instance.patchCSIDriver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCSINode', function() {
      it('should call patchCSINode successfully', function(done) {
        //uncomment below and update the code to test patchCSINode
        //instance.patchCSINode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchStorageClass', function() {
      it('should call patchStorageClass successfully', function(done) {
        //uncomment below and update the code to test patchStorageClass
        //instance.patchStorageClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchVolumeAttachment', function() {
      it('should call patchVolumeAttachment successfully', function(done) {
        //uncomment below and update the code to test patchVolumeAttachment
        //instance.patchVolumeAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCSIDriver', function() {
      it('should call readCSIDriver successfully', function(done) {
        //uncomment below and update the code to test readCSIDriver
        //instance.readCSIDriver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCSINode', function() {
      it('should call readCSINode successfully', function(done) {
        //uncomment below and update the code to test readCSINode
        //instance.readCSINode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readStorageClass', function() {
      it('should call readStorageClass successfully', function(done) {
        //uncomment below and update the code to test readStorageClass
        //instance.readStorageClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readVolumeAttachment', function() {
      it('should call readVolumeAttachment successfully', function(done) {
        //uncomment below and update the code to test readVolumeAttachment
        //instance.readVolumeAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCSIDriver', function() {
      it('should call replaceCSIDriver successfully', function(done) {
        //uncomment below and update the code to test replaceCSIDriver
        //instance.replaceCSIDriver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCSINode', function() {
      it('should call replaceCSINode successfully', function(done) {
        //uncomment below and update the code to test replaceCSINode
        //instance.replaceCSINode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceStorageClass', function() {
      it('should call replaceStorageClass successfully', function(done) {
        //uncomment below and update the code to test replaceStorageClass
        //instance.replaceStorageClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceVolumeAttachment', function() {
      it('should call replaceVolumeAttachment successfully', function(done) {
        //uncomment below and update the code to test replaceVolumeAttachment
        //instance.replaceVolumeAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
