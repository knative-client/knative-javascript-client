/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KubernetesJsClient);
  }
}(this, function(expect, KubernetesJsClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KubernetesJsClient.ServingKnativeDev_v1alpha1Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServingKnativeDev_v1alpha1Api', function() {
    describe('createNamespacedConfiguration', function() {
      it('should call createNamespacedConfiguration successfully', function(done) {
        //uncomment below and update the code to test createNamespacedConfiguration
        //instance.createNamespacedConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedRevision', function() {
      it('should call createNamespacedRevision successfully', function(done) {
        //uncomment below and update the code to test createNamespacedRevision
        //instance.createNamespacedRevision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedRoute', function() {
      it('should call createNamespacedRoute successfully', function(done) {
        //uncomment below and update the code to test createNamespacedRoute
        //instance.createNamespacedRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedService', function() {
      it('should call createNamespacedService successfully', function(done) {
        //uncomment below and update the code to test createNamespacedService
        //instance.createNamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedConfiguration', function() {
      it('should call deleteCollectionNamespacedConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedConfiguration
        //instance.deleteCollectionNamespacedConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedRevision', function() {
      it('should call deleteCollectionNamespacedRevision successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedRevision
        //instance.deleteCollectionNamespacedRevision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedRoute', function() {
      it('should call deleteCollectionNamespacedRoute successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedRoute
        //instance.deleteCollectionNamespacedRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedService', function() {
      it('should call deleteCollectionNamespacedService successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedService
        //instance.deleteCollectionNamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedConfiguration', function() {
      it('should call deleteNamespacedConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedConfiguration
        //instance.deleteNamespacedConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedRevision', function() {
      it('should call deleteNamespacedRevision successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedRevision
        //instance.deleteNamespacedRevision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedRoute', function() {
      it('should call deleteNamespacedRoute successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedRoute
        //instance.deleteNamespacedRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedService', function() {
      it('should call deleteNamespacedService successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedService
        //instance.deleteNamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConfigurationForAllNamespaces', function() {
      it('should call listConfigurationForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listConfigurationForAllNamespaces
        //instance.listConfigurationForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedConfiguration', function() {
      it('should call listNamespacedConfiguration successfully', function(done) {
        //uncomment below and update the code to test listNamespacedConfiguration
        //instance.listNamespacedConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedRevision', function() {
      it('should call listNamespacedRevision successfully', function(done) {
        //uncomment below and update the code to test listNamespacedRevision
        //instance.listNamespacedRevision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedRoute', function() {
      it('should call listNamespacedRoute successfully', function(done) {
        //uncomment below and update the code to test listNamespacedRoute
        //instance.listNamespacedRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedService', function() {
      it('should call listNamespacedService successfully', function(done) {
        //uncomment below and update the code to test listNamespacedService
        //instance.listNamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRevisionForAllNamespaces', function() {
      it('should call listRevisionForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listRevisionForAllNamespaces
        //instance.listRevisionForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRouteForAllNamespaces', function() {
      it('should call listRouteForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listRouteForAllNamespaces
        //instance.listRouteForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listServiceForAllNamespaces', function() {
      it('should call listServiceForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listServiceForAllNamespaces
        //instance.listServiceForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedConfiguration', function() {
      it('should call patchNamespacedConfiguration successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedConfiguration
        //instance.patchNamespacedConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedConfigurationStatus', function() {
      it('should call patchNamespacedConfigurationStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedConfigurationStatus
        //instance.patchNamespacedConfigurationStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedRevision', function() {
      it('should call patchNamespacedRevision successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedRevision
        //instance.patchNamespacedRevision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedRevisionStatus', function() {
      it('should call patchNamespacedRevisionStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedRevisionStatus
        //instance.patchNamespacedRevisionStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedRoute', function() {
      it('should call patchNamespacedRoute successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedRoute
        //instance.patchNamespacedRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedRouteStatus', function() {
      it('should call patchNamespacedRouteStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedRouteStatus
        //instance.patchNamespacedRouteStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedService', function() {
      it('should call patchNamespacedService successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedService
        //instance.patchNamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedServiceStatus', function() {
      it('should call patchNamespacedServiceStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedServiceStatus
        //instance.patchNamespacedServiceStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedConfiguration', function() {
      it('should call readNamespacedConfiguration successfully', function(done) {
        //uncomment below and update the code to test readNamespacedConfiguration
        //instance.readNamespacedConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedConfigurationStatus', function() {
      it('should call readNamespacedConfigurationStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedConfigurationStatus
        //instance.readNamespacedConfigurationStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedRevision', function() {
      it('should call readNamespacedRevision successfully', function(done) {
        //uncomment below and update the code to test readNamespacedRevision
        //instance.readNamespacedRevision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedRevisionStatus', function() {
      it('should call readNamespacedRevisionStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedRevisionStatus
        //instance.readNamespacedRevisionStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedRoute', function() {
      it('should call readNamespacedRoute successfully', function(done) {
        //uncomment below and update the code to test readNamespacedRoute
        //instance.readNamespacedRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedRouteStatus', function() {
      it('should call readNamespacedRouteStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedRouteStatus
        //instance.readNamespacedRouteStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedService', function() {
      it('should call readNamespacedService successfully', function(done) {
        //uncomment below and update the code to test readNamespacedService
        //instance.readNamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedServiceStatus', function() {
      it('should call readNamespacedServiceStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedServiceStatus
        //instance.readNamespacedServiceStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedConfiguration', function() {
      it('should call replaceNamespacedConfiguration successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedConfiguration
        //instance.replaceNamespacedConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedConfigurationStatus', function() {
      it('should call replaceNamespacedConfigurationStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedConfigurationStatus
        //instance.replaceNamespacedConfigurationStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedRevision', function() {
      it('should call replaceNamespacedRevision successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedRevision
        //instance.replaceNamespacedRevision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedRevisionStatus', function() {
      it('should call replaceNamespacedRevisionStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedRevisionStatus
        //instance.replaceNamespacedRevisionStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedRoute', function() {
      it('should call replaceNamespacedRoute successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedRoute
        //instance.replaceNamespacedRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedRouteStatus', function() {
      it('should call replaceNamespacedRouteStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedRouteStatus
        //instance.replaceNamespacedRouteStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedService', function() {
      it('should call replaceNamespacedService successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedService
        //instance.replaceNamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedServiceStatus', function() {
      it('should call replaceNamespacedServiceStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedServiceStatus
        //instance.replaceNamespacedServiceStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
