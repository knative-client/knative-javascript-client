/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.15.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KubernetesJsClient);
  }
}(this, function(expect, KubernetesJsClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KubernetesJsClient.NetworkingIstioIo_v1alpha3Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NetworkingIstioIo_v1alpha3Api', function() {
    describe('createNamespacedDestinationRule', function() {
      it('should call createNamespacedDestinationRule successfully', function(done) {
        //uncomment below and update the code to test createNamespacedDestinationRule
        //instance.createNamespacedDestinationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedEnvoyFilter', function() {
      it('should call createNamespacedEnvoyFilter successfully', function(done) {
        //uncomment below and update the code to test createNamespacedEnvoyFilter
        //instance.createNamespacedEnvoyFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedGateway', function() {
      it('should call createNamespacedGateway successfully', function(done) {
        //uncomment below and update the code to test createNamespacedGateway
        //instance.createNamespacedGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedServiceEntry', function() {
      it('should call createNamespacedServiceEntry successfully', function(done) {
        //uncomment below and update the code to test createNamespacedServiceEntry
        //instance.createNamespacedServiceEntry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedVirtualService', function() {
      it('should call createNamespacedVirtualService successfully', function(done) {
        //uncomment below and update the code to test createNamespacedVirtualService
        //instance.createNamespacedVirtualService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedDestinationRule', function() {
      it('should call deleteCollectionNamespacedDestinationRule successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedDestinationRule
        //instance.deleteCollectionNamespacedDestinationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedEnvoyFilter', function() {
      it('should call deleteCollectionNamespacedEnvoyFilter successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedEnvoyFilter
        //instance.deleteCollectionNamespacedEnvoyFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedGateway', function() {
      it('should call deleteCollectionNamespacedGateway successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedGateway
        //instance.deleteCollectionNamespacedGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedServiceEntry', function() {
      it('should call deleteCollectionNamespacedServiceEntry successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedServiceEntry
        //instance.deleteCollectionNamespacedServiceEntry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedVirtualService', function() {
      it('should call deleteCollectionNamespacedVirtualService successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedVirtualService
        //instance.deleteCollectionNamespacedVirtualService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedDestinationRule', function() {
      it('should call deleteNamespacedDestinationRule successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedDestinationRule
        //instance.deleteNamespacedDestinationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedEnvoyFilter', function() {
      it('should call deleteNamespacedEnvoyFilter successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedEnvoyFilter
        //instance.deleteNamespacedEnvoyFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedGateway', function() {
      it('should call deleteNamespacedGateway successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedGateway
        //instance.deleteNamespacedGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedServiceEntry', function() {
      it('should call deleteNamespacedServiceEntry successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedServiceEntry
        //instance.deleteNamespacedServiceEntry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedVirtualService', function() {
      it('should call deleteNamespacedVirtualService successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedVirtualService
        //instance.deleteNamespacedVirtualService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDestinationRuleForAllNamespaces', function() {
      it('should call listDestinationRuleForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listDestinationRuleForAllNamespaces
        //instance.listDestinationRuleForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEnvoyFilterForAllNamespaces', function() {
      it('should call listEnvoyFilterForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listEnvoyFilterForAllNamespaces
        //instance.listEnvoyFilterForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGatewayForAllNamespaces', function() {
      it('should call listGatewayForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listGatewayForAllNamespaces
        //instance.listGatewayForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedDestinationRule', function() {
      it('should call listNamespacedDestinationRule successfully', function(done) {
        //uncomment below and update the code to test listNamespacedDestinationRule
        //instance.listNamespacedDestinationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedEnvoyFilter', function() {
      it('should call listNamespacedEnvoyFilter successfully', function(done) {
        //uncomment below and update the code to test listNamespacedEnvoyFilter
        //instance.listNamespacedEnvoyFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedGateway', function() {
      it('should call listNamespacedGateway successfully', function(done) {
        //uncomment below and update the code to test listNamespacedGateway
        //instance.listNamespacedGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedServiceEntry', function() {
      it('should call listNamespacedServiceEntry successfully', function(done) {
        //uncomment below and update the code to test listNamespacedServiceEntry
        //instance.listNamespacedServiceEntry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedVirtualService', function() {
      it('should call listNamespacedVirtualService successfully', function(done) {
        //uncomment below and update the code to test listNamespacedVirtualService
        //instance.listNamespacedVirtualService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listServiceEntryForAllNamespaces', function() {
      it('should call listServiceEntryForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listServiceEntryForAllNamespaces
        //instance.listServiceEntryForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVirtualServiceForAllNamespaces', function() {
      it('should call listVirtualServiceForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listVirtualServiceForAllNamespaces
        //instance.listVirtualServiceForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedDestinationRule', function() {
      it('should call patchNamespacedDestinationRule successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedDestinationRule
        //instance.patchNamespacedDestinationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedEnvoyFilter', function() {
      it('should call patchNamespacedEnvoyFilter successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedEnvoyFilter
        //instance.patchNamespacedEnvoyFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedGateway', function() {
      it('should call patchNamespacedGateway successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedGateway
        //instance.patchNamespacedGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedServiceEntry', function() {
      it('should call patchNamespacedServiceEntry successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedServiceEntry
        //instance.patchNamespacedServiceEntry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedVirtualService', function() {
      it('should call patchNamespacedVirtualService successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedVirtualService
        //instance.patchNamespacedVirtualService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedDestinationRule', function() {
      it('should call readNamespacedDestinationRule successfully', function(done) {
        //uncomment below and update the code to test readNamespacedDestinationRule
        //instance.readNamespacedDestinationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedEnvoyFilter', function() {
      it('should call readNamespacedEnvoyFilter successfully', function(done) {
        //uncomment below and update the code to test readNamespacedEnvoyFilter
        //instance.readNamespacedEnvoyFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedGateway', function() {
      it('should call readNamespacedGateway successfully', function(done) {
        //uncomment below and update the code to test readNamespacedGateway
        //instance.readNamespacedGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedServiceEntry', function() {
      it('should call readNamespacedServiceEntry successfully', function(done) {
        //uncomment below and update the code to test readNamespacedServiceEntry
        //instance.readNamespacedServiceEntry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedVirtualService', function() {
      it('should call readNamespacedVirtualService successfully', function(done) {
        //uncomment below and update the code to test readNamespacedVirtualService
        //instance.readNamespacedVirtualService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedDestinationRule', function() {
      it('should call replaceNamespacedDestinationRule successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedDestinationRule
        //instance.replaceNamespacedDestinationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedEnvoyFilter', function() {
      it('should call replaceNamespacedEnvoyFilter successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedEnvoyFilter
        //instance.replaceNamespacedEnvoyFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedGateway', function() {
      it('should call replaceNamespacedGateway successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedGateway
        //instance.replaceNamespacedGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedServiceEntry', function() {
      it('should call replaceNamespacedServiceEntry successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedServiceEntry
        //instance.replaceNamespacedServiceEntry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedVirtualService', function() {
      it('should call replaceNamespacedVirtualService successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedVirtualService
        //instance.replaceNamespacedVirtualService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
